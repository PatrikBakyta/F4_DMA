
C:\Users\Patrik Bakyta\Documents\GitHub\VRS\F4_DMA\Debug\F4_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08000cf8  08000cf8  00010cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000d78  08000d78  00010d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000d7c  08000d7c  00010d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010d80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010d80  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010d80  2**0
                  CONTENTS, READONLY
 10 .debug_info   00003038  00000000  00000000  00010db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000009f6  00000000  00000000  00013de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000400  00000000  00000000  000147e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000378  00000000  00000000  00014be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001798  00000000  00000000  00014f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000190f  00000000  00000000  000166f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00017fff  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000f9c  00000000  00000000  00018080  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0001901c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ce0 	.word	0x08000ce0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000ce0 	.word	0x08000ce0

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d038      	beq.n	8000256 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001ee:	0a1b      	lsrs	r3, r3, #8
 80001f0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
 80001f4:	f1c3 0304 	rsb	r3, r3, #4
 80001f8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fa:	7b7a      	ldrb	r2, [r7, #13]
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
 80001fe:	fa42 f303 	asr.w	r3, r2, r3
 8000202:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	785b      	ldrb	r3, [r3, #1]
 8000208:	461a      	mov	r2, r3
 800020a:	7bbb      	ldrb	r3, [r7, #14]
 800020c:	fa02 f303 	lsl.w	r3, r2, r3
 8000210:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	789a      	ldrb	r2, [r3, #2]
 8000216:	7b7b      	ldrb	r3, [r7, #13]
 8000218:	4013      	ands	r3, r2
 800021a:	b2da      	uxtb	r2, r3
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	4313      	orrs	r3, r2
 8000220:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	011b      	lsls	r3, r3, #4
 8000226:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000228:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4413      	add	r3, r2
 8000230:	7bfa      	ldrb	r2, [r7, #15]
 8000232:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000236:	4a14      	ldr	r2, [pc, #80]	; (8000288 <NVIC_Init+0xc0>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	095b      	lsrs	r3, r3, #5
 800023e:	b2db      	uxtb	r3, r3
 8000240:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	f003 031f 	and.w	r3, r3, #31
 800024a:	2101      	movs	r1, #1
 800024c:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000250:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000254:	e00f      	b.n	8000276 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000256:	490c      	ldr	r1, [pc, #48]	; (8000288 <NVIC_Init+0xc0>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	095b      	lsrs	r3, r3, #5
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	f003 031f 	and.w	r3, r3, #31
 800026a:	2201      	movs	r2, #1
 800026c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800026e:	f100 0320 	add.w	r3, r0, #32
 8000272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f023 0201 	bic.w	r2, r3, #1
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2200      	movs	r2, #0
 80002aa:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2200      	movs	r2, #0
 80002b0:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2200      	movs	r2, #0
 80002b6:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2200      	movs	r2, #0
 80002bc:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2221      	movs	r2, #33	; 0x21
 80002c2:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a46      	ldr	r2, [pc, #280]	; (80003e0 <DMA_DeInit+0x154>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d103      	bne.n	80002d4 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80002cc:	4b45      	ldr	r3, [pc, #276]	; (80003e4 <DMA_DeInit+0x158>)
 80002ce:	223d      	movs	r2, #61	; 0x3d
 80002d0:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80002d2:	e07e      	b.n	80003d2 <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a44      	ldr	r2, [pc, #272]	; (80003e8 <DMA_DeInit+0x15c>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d104      	bne.n	80002e6 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 80002dc:	4b41      	ldr	r3, [pc, #260]	; (80003e4 <DMA_DeInit+0x158>)
 80002de:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80002e2:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80002e4:	e075      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a40      	ldr	r2, [pc, #256]	; (80003ec <DMA_DeInit+0x160>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d104      	bne.n	80002f8 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 80002ee:	4b3d      	ldr	r3, [pc, #244]	; (80003e4 <DMA_DeInit+0x158>)
 80002f0:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80002f4:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80002f6:	e06c      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a3d      	ldr	r2, [pc, #244]	; (80003f0 <DMA_DeInit+0x164>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d104      	bne.n	800030a <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000300:	4b38      	ldr	r3, [pc, #224]	; (80003e4 <DMA_DeInit+0x158>)
 8000302:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000306:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000308:	e063      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a39      	ldr	r2, [pc, #228]	; (80003f4 <DMA_DeInit+0x168>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d103      	bne.n	800031a <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000312:	4b34      	ldr	r3, [pc, #208]	; (80003e4 <DMA_DeInit+0x158>)
 8000314:	4a38      	ldr	r2, [pc, #224]	; (80003f8 <DMA_DeInit+0x16c>)
 8000316:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000318:	e05b      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a37      	ldr	r2, [pc, #220]	; (80003fc <DMA_DeInit+0x170>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d103      	bne.n	800032a <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000322:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <DMA_DeInit+0x158>)
 8000324:	4a36      	ldr	r2, [pc, #216]	; (8000400 <DMA_DeInit+0x174>)
 8000326:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000328:	e053      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a35      	ldr	r2, [pc, #212]	; (8000404 <DMA_DeInit+0x178>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d103      	bne.n	800033a <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000332:	4b2c      	ldr	r3, [pc, #176]	; (80003e4 <DMA_DeInit+0x158>)
 8000334:	4a34      	ldr	r2, [pc, #208]	; (8000408 <DMA_DeInit+0x17c>)
 8000336:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000338:	e04b      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a33      	ldr	r2, [pc, #204]	; (800040c <DMA_DeInit+0x180>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d104      	bne.n	800034c <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000342:	4b28      	ldr	r3, [pc, #160]	; (80003e4 <DMA_DeInit+0x158>)
 8000344:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000348:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800034a:	e042      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a30      	ldr	r2, [pc, #192]	; (8000410 <DMA_DeInit+0x184>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d103      	bne.n	800035c <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000354:	4b2f      	ldr	r3, [pc, #188]	; (8000414 <DMA_DeInit+0x188>)
 8000356:	223d      	movs	r2, #61	; 0x3d
 8000358:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800035a:	e03a      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a2e      	ldr	r2, [pc, #184]	; (8000418 <DMA_DeInit+0x18c>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d104      	bne.n	800036e <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000364:	4b2b      	ldr	r3, [pc, #172]	; (8000414 <DMA_DeInit+0x188>)
 8000366:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800036a:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800036c:	e031      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a2a      	ldr	r2, [pc, #168]	; (800041c <DMA_DeInit+0x190>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d104      	bne.n	8000380 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000376:	4b27      	ldr	r3, [pc, #156]	; (8000414 <DMA_DeInit+0x188>)
 8000378:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800037c:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800037e:	e028      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a27      	ldr	r2, [pc, #156]	; (8000420 <DMA_DeInit+0x194>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d104      	bne.n	8000392 <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000388:	4b22      	ldr	r3, [pc, #136]	; (8000414 <DMA_DeInit+0x188>)
 800038a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800038e:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000390:	e01f      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a23      	ldr	r2, [pc, #140]	; (8000424 <DMA_DeInit+0x198>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d103      	bne.n	80003a2 <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800039a:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <DMA_DeInit+0x188>)
 800039c:	4a16      	ldr	r2, [pc, #88]	; (80003f8 <DMA_DeInit+0x16c>)
 800039e:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80003a0:	e017      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a20      	ldr	r2, [pc, #128]	; (8000428 <DMA_DeInit+0x19c>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d103      	bne.n	80003b2 <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <DMA_DeInit+0x188>)
 80003ac:	4a14      	ldr	r2, [pc, #80]	; (8000400 <DMA_DeInit+0x174>)
 80003ae:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80003b0:	e00f      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a1d      	ldr	r2, [pc, #116]	; (800042c <DMA_DeInit+0x1a0>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d103      	bne.n	80003c2 <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80003ba:	4b16      	ldr	r3, [pc, #88]	; (8000414 <DMA_DeInit+0x188>)
 80003bc:	4a12      	ldr	r2, [pc, #72]	; (8000408 <DMA_DeInit+0x17c>)
 80003be:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80003c0:	e007      	b.n	80003d2 <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a1a      	ldr	r2, [pc, #104]	; (8000430 <DMA_DeInit+0x1a4>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d103      	bne.n	80003d2 <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <DMA_DeInit+0x188>)
 80003cc:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80003d0:	60da      	str	r2, [r3, #12]
    }
  }
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40026010 	.word	0x40026010
 80003e4:	40026000 	.word	0x40026000
 80003e8:	40026028 	.word	0x40026028
 80003ec:	40026040 	.word	0x40026040
 80003f0:	40026058 	.word	0x40026058
 80003f4:	40026070 	.word	0x40026070
 80003f8:	2000003d 	.word	0x2000003d
 80003fc:	40026088 	.word	0x40026088
 8000400:	20000f40 	.word	0x20000f40
 8000404:	400260a0 	.word	0x400260a0
 8000408:	203d0000 	.word	0x203d0000
 800040c:	400260b8 	.word	0x400260b8
 8000410:	40026410 	.word	0x40026410
 8000414:	40026400 	.word	0x40026400
 8000418:	40026428 	.word	0x40026428
 800041c:	40026440 	.word	0x40026440
 8000420:	40026458 	.word	0x40026458
 8000424:	40026470 	.word	0x40026470
 8000428:	40026488 	.word	0x40026488
 800042c:	400264a0 	.word	0x400264a0
 8000430:	400264b8 	.word	0x400264b8

08000434 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000448:	68fa      	ldr	r2, [r7, #12]
 800044a:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <DMA_Init+0xac>)
 800044c:	4013      	ands	r3, r2
 800044e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800045e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800046a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	6a1b      	ldr	r3, [r3, #32]
 8000470:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000476:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800047c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000482:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000488:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800048a:	68fa      	ldr	r2, [r7, #12]
 800048c:	4313      	orrs	r3, r2
 800048e:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f023 0307 	bic.w	r3, r3, #7
 80004a2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ac:	4313      	orrs	r3, r2
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	68fa      	ldr	r2, [r7, #12]
 80004b8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	691a      	ldr	r2, [r3, #16]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	685a      	ldr	r2, [r3, #4]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	689a      	ldr	r2, [r3, #8]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	60da      	str	r2, [r3, #12]
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	f01c803f 	.word	0xf01c803f

080004e4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d006      	beq.n	8000504 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f043 0201 	orr.w	r2, r3, #1
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000502:	e005      	b.n	8000510 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f023 0201 	bic.w	r2, r3, #1
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	601a      	str	r2, [r3, #0]
  }
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000524:	2300      	movs	r3, #0
 8000526:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f003 0301 	and.w	r3, r3, #1
 8000530:	2b00      	cmp	r3, #0
 8000532:	d002      	beq.n	800053a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000534:	2301      	movs	r3, #1
 8000536:	73fb      	strb	r3, [r7, #15]
 8000538:	e001      	b.n	800053e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800053a:	2300      	movs	r3, #0
 800053c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800053e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	4613      	mov	r3, r2
 8000558:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00f      	beq.n	8000584 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d006      	beq.n	8000578 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	615a      	str	r2, [r3, #20]
 8000576:	e005      	b.n	8000584 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	695b      	ldr	r3, [r3, #20]
 800057c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	2b80      	cmp	r3, #128	; 0x80
 8000588:	d014      	beq.n	80005b4 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d008      	beq.n	80005a2 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	f003 031e 	and.w	r3, r3, #30
 800059a:	431a      	orrs	r2, r3
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 80005a0:	e008      	b.n	80005b4 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	f003 031e 	and.w	r3, r3, #30
 80005ac:	43db      	mvns	r3, r3
 80005ae:	401a      	ands	r2, r3
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	601a      	str	r2, [r3, #0]
    }    
  }
}
 80005b4:	bf00      	nop
 80005b6:	3714      	adds	r7, #20
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b087      	sub	sp, #28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80005ca:	2300      	movs	r3, #0
 80005cc:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a22      	ldr	r2, [pc, #136]	; (8000664 <DMA_GetITStatus+0xa4>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d802      	bhi.n	80005e4 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80005de:	4b22      	ldr	r3, [pc, #136]	; (8000668 <DMA_GetITStatus+0xa8>)
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	e001      	b.n	80005e8 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80005e4:	4b21      	ldr	r3, [pc, #132]	; (800066c <DMA_GetITStatus+0xac>)
 80005e6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80005ee:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d00a      	beq.n	800060c <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	0adb      	lsrs	r3, r3, #11
 80005fa:	f003 031e 	and.w	r3, r3, #30
 80005fe:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	4013      	ands	r3, r2
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	e004      	b.n	8000616 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000614:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800061c:	2b00      	cmp	r3, #0
 800061e:	d003      	beq.n	8000628 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	e002      	b.n	800062e <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000634:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000638:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	4013      	ands	r3, r2
 8000640:	2b00      	cmp	r3, #0
 8000642:	d005      	beq.n	8000650 <DMA_GetITStatus+0x90>
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 800064a:	2301      	movs	r3, #1
 800064c:	75fb      	strb	r3, [r7, #23]
 800064e:	e001      	b.n	8000654 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8000650:	2300      	movs	r3, #0
 8000652:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8000654:	7dfb      	ldrb	r3, [r7, #23]
}
 8000656:	4618      	mov	r0, r3
 8000658:	371c      	adds	r7, #28
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	4002640f 	.word	0x4002640f
 8000668:	40026000 	.word	0x40026000
 800066c:	40026400 	.word	0x40026400

08000670 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <DMA_ClearITPendingBit+0x50>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d802      	bhi.n	8000688 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <DMA_ClearITPendingBit+0x54>)
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	e001      	b.n	800068c <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <DMA_ClearITPendingBit+0x58>)
 800068a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000692:	2b00      	cmp	r3, #0
 8000694:	d007      	beq.n	80006a6 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800069c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 80006a4:	e006      	b.n	80006b4 <DMA_ClearITPendingBit+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80006ac:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	6093      	str	r3, [r2, #8]
  }   
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	4002640f 	.word	0x4002640f
 80006c4:	40026000 	.word	0x40026000
 80006c8:	40026400 	.word	0x40026400

080006cc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
 80006e6:	e076      	b.n	80007d6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80006e8:	2201      	movs	r2, #1
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	fa02 f303 	lsl.w	r3, r2, r3
 80006f0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	4013      	ands	r3, r2
 80006fa:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80006fc:	68fa      	ldr	r2, [r7, #12]
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	429a      	cmp	r2, r3
 8000702:	d165      	bne.n	80007d0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	2103      	movs	r1, #3
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	43db      	mvns	r3, r3
 8000714:	401a      	ands	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	4619      	mov	r1, r3
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	fa01 f303 	lsl.w	r3, r1, r3
 800072c:	431a      	orrs	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	791b      	ldrb	r3, [r3, #4]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d003      	beq.n	8000742 <GPIO_Init+0x76>
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	2b02      	cmp	r3, #2
 8000740:	d12e      	bne.n	80007a0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	689a      	ldr	r2, [r3, #8]
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	2103      	movs	r1, #3
 800074c:	fa01 f303 	lsl.w	r3, r1, r3
 8000750:	43db      	mvns	r3, r3
 8000752:	401a      	ands	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	689a      	ldr	r2, [r3, #8]
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	795b      	ldrb	r3, [r3, #5]
 8000760:	4619      	mov	r1, r3
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	431a      	orrs	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685a      	ldr	r2, [r3, #4]
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	b29b      	uxth	r3, r3
 8000778:	2101      	movs	r1, #1
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	43db      	mvns	r3, r3
 8000780:	401a      	ands	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	685a      	ldr	r2, [r3, #4]
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	799b      	ldrb	r3, [r3, #6]
 800078e:	4619      	mov	r1, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	b29b      	uxth	r3, r3
 8000794:	fa01 f303 	lsl.w	r3, r1, r3
 8000798:	b29b      	uxth	r3, r3
 800079a:	431a      	orrs	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	68da      	ldr	r2, [r3, #12]
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	2103      	movs	r1, #3
 80007ac:	fa01 f303 	lsl.w	r3, r1, r3
 80007b0:	43db      	mvns	r3, r3
 80007b2:	401a      	ands	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	68da      	ldr	r2, [r3, #12]
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	79db      	ldrb	r3, [r3, #7]
 80007c0:	4619      	mov	r1, r3
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ca:	431a      	orrs	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	3301      	adds	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	2b0f      	cmp	r3, #15
 80007da:	d985      	bls.n	80006e8 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80007dc:	bf00      	nop
 80007de:	371c      	adds	r7, #28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	887a      	ldrh	r2, [r7, #2]
 80007f8:	831a      	strh	r2, [r3, #24]
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop

08000808 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	695a      	ldr	r2, [r3, #20]
 8000818:	887b      	ldrh	r3, [r7, #2]
 800081a:	405a      	eors	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	615a      	str	r2, [r3, #20]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d006      	beq.n	800084c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800083e:	490a      	ldr	r1, [pc, #40]	; (8000868 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4313      	orrs	r3, r2
 8000848:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800084a:	e006      	b.n	800085a <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800084c:	4906      	ldr	r1, [pc, #24]	; (8000868 <RCC_AHB1PeriphClockCmd+0x3c>)
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	43db      	mvns	r3, r3
 8000856:	4013      	ands	r3, r2
 8000858:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <_Z7initLEDv>:
#include <stm32f4xx_gpio.h>
#include <stm32f4xx_rcc.h>
#include <misc.h>
#include <dma.h>

void initLED(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
 8000872:	2101      	movs	r1, #1
 8000874:	2008      	movs	r0, #8
 8000876:	f7ff ffd9 	bl	800082c <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef initStruct;
	initStruct.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13;
 800087a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800087e:	603b      	str	r3, [r7, #0]
	initStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000880:	2301      	movs	r3, #1
 8000882:	713b      	strb	r3, [r7, #4]
	initStruct.GPIO_OType = GPIO_OType_PP;
 8000884:	2300      	movs	r3, #0
 8000886:	71bb      	strb	r3, [r7, #6]
	initStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000888:	2301      	movs	r3, #1
 800088a:	71fb      	strb	r3, [r7, #7]
	initStruct.GPIO_Speed = GPIO_Speed_50MHz;
 800088c:	2302      	movs	r3, #2
 800088e:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOD,&initStruct);
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <_Z7initLEDv+0x38>)
 8000896:	f7ff ff19 	bl	80006cc <GPIO_Init>

	return;
 800089a:	bf00      	nop
}
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40020c00 	.word	0x40020c00

080008a8 <_Z7initDMAv>:

void initDMA(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b0d2      	sub	sp, #328	; 0x148
 80008ac:	af00      	add	r7, sp, #0
	                                    0x21222324,0x25262728,0x292A2B2C,0x2D2E2F30,
	                                    0x31323334,0x35363738,0x393A3B3C,0x3D3E3F40,
	                                    0x41424344,0x45464748,0x494A4B4C,0x4D4E4F50,
	                                    0x51525354,0x55565758,0x595A5B5C,0x5D5E5F60,
	                                    0x61626364,0x65666768,0x696A6B6C,0x6D6E6F70,
	                                    0x71727374,0x75767778,0x797A7B7C,0x7D7E7F80};
 80008ae:	4a4d      	ldr	r2, [pc, #308]	; (80009e4 <_Z7initDMAv+0x13c>)
 80008b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008b4:	4611      	mov	r1, r2
 80008b6:	2280      	movs	r2, #128	; 0x80
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fa05 	bl	8000cc8 <memcpy>
	uint32_t DST_Buffer[BUFFER_SIZE];

	uint32_t Timeout;

	//Enable DMA1 clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 80008be:	2101      	movs	r1, #1
 80008c0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80008c4:	f7ff ffb2 	bl	800082c <RCC_AHB1PeriphClockCmd>
	//Create DMA structure
	DMA_InitTypeDef  DMA_InitStructure;
	//Reset DMA2 Stream0 to default values;
	DMA_DeInit(DMA2_Stream0);
 80008c8:	4847      	ldr	r0, [pc, #284]	; (80009e8 <_Z7initDMAv+0x140>)
 80008ca:	f7ff fcdf 	bl	800028c <DMA_DeInit>
	   enabled, then disabled then re-enabled... In this case, the DMA Stream disable
	   will be effective only at the end of the ongoing data transfer and it will
	   not be possible to re-configure it before making sure that the Enable bit
	   has been cleared by hardware. If the Stream is used only once, this step might
	   be bypassed. */
	while (DMA_GetCmdStatus(DMA2_Stream0)!=DISABLE) {}
 80008ce:	4846      	ldr	r0, [pc, #280]	; (80009e8 <_Z7initDMAv+0x140>)
 80008d0:	f7ff fe24 	bl	800051c <DMA_GetCmdStatus>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	bf14      	ite	ne
 80008da:	2301      	movne	r3, #1
 80008dc:	2300      	moveq	r3, #0
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d000      	beq.n	80008e6 <_Z7initDMAv+0x3e>
 80008e4:	e7f3      	b.n	80008ce <_Z7initDMAv+0x26>

	//Configure DMA Stream
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SRC_Const_Buffer;
 80008ee:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	605a      	str	r2, [r3, #4]
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)DST_Buffer;
 80008f8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	609a      	str	r2, [r3, #8]
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToMemory;
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2280      	movs	r2, #128	; 0x80
 8000908:	60da      	str	r2, [r3, #12]
	DMA_InitStructure.DMA_BufferSize = (uint32_t)BUFFER_SIZE;
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	2220      	movs	r2, #32
 8000910:	611a      	str	r2, [r3, #16]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Enable;
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091a:	615a      	str	r2, [r3, #20]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000924:	619a      	str	r2, [r3, #24]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800092e:	61da      	str	r2, [r3, #28]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000938:	621a      	str	r2, [r3, #32]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	2200      	movs	r2, #0
 8000952:	62da      	str	r2, [r3, #44]	; 0x2c
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	2203      	movs	r2, #3
 800095a:	631a      	str	r2, [r3, #48]	; 0x30
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	2200      	movs	r2, #0
 8000962:	635a      	str	r2, [r3, #52]	; 0x34
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	2200      	movs	r2, #0
 800096a:	639a      	str	r2, [r3, #56]	; 0x38
	DMA_Init(DMA2_Stream0, &DMA_InitStructure);
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	4619      	mov	r1, r3
 8000972:	481d      	ldr	r0, [pc, #116]	; (80009e8 <_Z7initDMAv+0x140>)
 8000974:	f7ff fd5e 	bl	8000434 <DMA_Init>

	//Enable DMA Stream Transfer Complete interrupt
	DMA_ITConfig(DMA2_Stream0, DMA_IT_TC, ENABLE);
 8000978:	2201      	movs	r2, #1
 800097a:	2110      	movs	r1, #16
 800097c:	481a      	ldr	r0, [pc, #104]	; (80009e8 <_Z7initDMAv+0x140>)
 800097e:	f7ff fde5 	bl	800054c <DMA_ITConfig>

	/* Check if the DMA Stream has been effectively enabled.
	   The DMA Stream Enable bit is cleared immediately by hardware if there is an
	   error in the configuration parameters and the transfer is no started (ie. when
	   wrong FIFO threshold is configured ...) */
	Timeout = TIMEOUT_MAX;
 8000982:	f242 7310 	movw	r3, #10000	; 0x2710
 8000986:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	while ((DMA_GetCmdStatus(DMA2_Stream0)!=ENABLE)&&(Timeout-->0)) {}
 800098a:	4817      	ldr	r0, [pc, #92]	; (80009e8 <_Z7initDMAv+0x140>)
 800098c:	f7ff fdc6 	bl	800051c <DMA_GetCmdStatus>
 8000990:	4603      	mov	r3, r0
 8000992:	2b01      	cmp	r3, #1
 8000994:	d008      	beq.n	80009a8 <_Z7initDMAv+0x100>
 8000996:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800099a:	1e5a      	subs	r2, r3, #1
 800099c:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <_Z7initDMAv+0x100>
 80009a4:	2301      	movs	r3, #1
 80009a6:	e000      	b.n	80009aa <_Z7initDMAv+0x102>
 80009a8:	2300      	movs	r3, #0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <_Z7initDMAv+0x108>
 80009ae:	e7ec      	b.n	800098a <_Z7initDMAv+0xe2>

	//Check if a timeout condition occurred
	if (Timeout == 0) {
 80009b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d100      	bne.n	80009ba <_Z7initDMAv+0x112>

		//Manage the error: to simplify the code enter an infinite loop
		while (1) {}
 80009b8:	e7fe      	b.n	80009b8 <_Z7initDMAv+0x110>
	}

	//Enable the DMA Stream IRQ Channel
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream0_IRQn;
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2238      	movs	r2, #56	; 0x38
 80009be:	701a      	strb	r2, [r3, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2200      	movs	r2, #0
 80009ca:	709a      	strb	r2, [r3, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2201      	movs	r2, #1
 80009d0:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&NVIC_InitStructure);
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fbf7 	bl	80001c8 <NVIC_Init>

	return;
 80009da:	bf00      	nop
}
 80009dc:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	08000cf8 	.word	0x08000cf8
 80009e8:	40026410 	.word	0x40026410

080009ec <DMA2_Stream0_IRQHandler>:


extern "C" void DMA2_Stream0_IRQHandler(void) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

	//Test on DMA2 Channel0 Transfer Complete Interrupt
	if(DMA_GetITStatus(DMA2_Stream0, DMA_IT_TCIF0)) {
 80009f0:	490b      	ldr	r1, [pc, #44]	; (8000a20 <DMA2_Stream0_IRQHandler+0x34>)
 80009f2:	480c      	ldr	r0, [pc, #48]	; (8000a24 <DMA2_Stream0_IRQHandler+0x38>)
 80009f4:	f7ff fde4 	bl	80005c0 <DMA_GetITStatus>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	bf14      	ite	ne
 80009fe:	2301      	movne	r3, #1
 8000a00:	2300      	moveq	r3, #0
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d008      	beq.n	8000a1a <DMA2_Stream0_IRQHandler+0x2e>

		//LED on after transfer (PIN13)
		GPIO_ToggleBits(GPIOD,GPIO_Pin_13);
 8000a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0c:	4806      	ldr	r0, [pc, #24]	; (8000a28 <DMA2_Stream0_IRQHandler+0x3c>)
 8000a0e:	f7ff fefb 	bl	8000808 <GPIO_ToggleBits>
		//Clear DMA2 Channel0 Transfer Complete Interrupt pending bit
		DMA_ClearITPendingBit(DMA2_Stream0, DMA_IT_TCIF0);
 8000a12:	4903      	ldr	r1, [pc, #12]	; (8000a20 <DMA2_Stream0_IRQHandler+0x34>)
 8000a14:	4803      	ldr	r0, [pc, #12]	; (8000a24 <DMA2_Stream0_IRQHandler+0x38>)
 8000a16:	f7ff fe2b 	bl	8000670 <DMA_ClearITPendingBit>
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	10008020 	.word	0x10008020
 8000a24:	40026410 	.word	0x40026410
 8000a28:	40020c00 	.word	0x40020c00

08000a2c <main>:
**  Abstract: main program
**
**===========================================================================
*/

int main(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0

	initLED();
 8000a30:	f7ff ff1c 	bl	800086c <_Z7initLEDv>
	initDMA();
 8000a34:	f7ff ff38 	bl	80008a8 <_Z7initDMAv>

	//LED on before transfer (PIN12)
	GPIO_SetBits(GPIOD,GPIO_Pin_12);
 8000a38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3c:	4803      	ldr	r0, [pc, #12]	; (8000a4c <main+0x20>)
 8000a3e:	f7ff fed3 	bl	80007e8 <GPIO_SetBits>

	//DMA Stream enable
	DMA_Cmd(DMA2_Stream0, ENABLE);
 8000a42:	2101      	movs	r1, #1
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <main+0x24>)
 8000a46:	f7ff fd4d 	bl	80004e4 <DMA_Cmd>

	while (1) {
 8000a4a:	e7fe      	b.n	8000a4a <main+0x1e>
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40026410 	.word	0x40026410

08000a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a5a:	e003      	b.n	8000a64 <LoopCopyDataInit>

08000a5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a62:	3104      	adds	r1, #4

08000a64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a6c:	d3f6      	bcc.n	8000a5c <CopyDataInit>
  ldr  r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a70:	e002      	b.n	8000a78 <LoopFillZerobss>

08000a72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a74:	f842 3b04 	str.w	r3, [r2], #4

08000a78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a7c:	d3f9      	bcc.n	8000a72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a7e:	f000 f84b 	bl	8000b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f000 f8fb 	bl	8000c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a86:	f7ff ffd1 	bl	8000a2c <main>
  bx  lr    
 8000a8a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a8c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000a90:	08000d80 	.word	0x08000d80
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a98:	20000000 	.word	0x20000000
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000a9c:	20000000 	.word	0x20000000
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000aa0:	2000001c 	.word	0x2000001c

08000aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC_IRQHandler>
	...

08000aa8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000abc:	e7fe      	b.n	8000abc <HardFault_Handler+0x4>
 8000abe:	bf00      	nop

08000ac0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000ac4:	e7fe      	b.n	8000ac4 <MemManage_Handler+0x4>
 8000ac6:	bf00      	nop

08000ac8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000acc:	e7fe      	b.n	8000acc <BusFault_Handler+0x4>
 8000ace:	bf00      	nop

08000ad0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>
 8000ad6:	bf00      	nop

08000ad8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b1c:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <SystemInit+0x60>)
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <SystemInit+0x60>)
 8000b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <SystemInit+0x64>)
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <SystemInit+0x64>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b38:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <SystemInit+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b3e:	4a0f      	ldr	r2, [pc, #60]	; (8000b7c <SystemInit+0x64>)
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <SystemInit+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <SystemInit+0x64>)
 8000b50:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <SystemInit+0x68>)
 8000b52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b54:	4a09      	ldr	r2, [pc, #36]	; (8000b7c <SystemInit+0x64>)
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <SystemInit+0x64>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <SystemInit+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000b66:	f000 f80d 	bl	8000b84 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b6a:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <SystemInit+0x60>)
 8000b6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b70:	609a      	str	r2, [r3, #8]
#endif
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	24003010 	.word	0x24003010

08000b84 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000b92:	4a36      	ldr	r2, [pc, #216]	; (8000c6c <SetSysClock+0xe8>)
 8000b94:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <SetSysClock+0xe8>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000b9e:	4b33      	ldr	r3, [pc, #204]	; (8000c6c <SetSysClock+0xe8>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3301      	adds	r3, #1
 8000bac:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d103      	bne.n	8000bbc <SetSysClock+0x38>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000bba:	d1f0      	bne.n	8000b9e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000bbc:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <SetSysClock+0xe8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	e001      	b.n	8000bd2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d142      	bne.n	8000c5e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000bd8:	4a24      	ldr	r2, [pc, #144]	; (8000c6c <SetSysClock+0xe8>)
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <SetSysClock+0xe8>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000be4:	4a22      	ldr	r2, [pc, #136]	; (8000c70 <SetSysClock+0xec>)
 8000be6:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <SetSysClock+0xec>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bee:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000bf0:	4a1e      	ldr	r2, [pc, #120]	; (8000c6c <SetSysClock+0xe8>)
 8000bf2:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <SetSysClock+0xe8>)
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000bf8:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <SetSysClock+0xe8>)
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <SetSysClock+0xe8>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c02:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000c04:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <SetSysClock+0xe8>)
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <SetSysClock+0xe8>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000c0e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <SetSysClock+0xe8>)
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <SetSysClock+0xf0>)
 8000c14:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000c16:	4a15      	ldr	r2, [pc, #84]	; (8000c6c <SetSysClock+0xe8>)
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <SetSysClock+0xe8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c20:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000c22:	bf00      	nop
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <SetSysClock+0xe8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0f9      	beq.n	8000c24 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <SetSysClock+0xf4>)
 8000c32:	f240 7205 	movw	r2, #1797	; 0x705
 8000c36:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000c38:	4a0c      	ldr	r2, [pc, #48]	; (8000c6c <SetSysClock+0xe8>)
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <SetSysClock+0xe8>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	f023 0303 	bic.w	r3, r3, #3
 8000c42:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000c44:	4a09      	ldr	r2, [pc, #36]	; (8000c6c <SetSysClock+0xe8>)
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <SetSysClock+0xe8>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	f043 0302 	orr.w	r3, r3, #2
 8000c4e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000c50:	bf00      	nop
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <SetSysClock+0xe8>)
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	f003 030c 	and.w	r3, r3, #12
 8000c5a:	2b08      	cmp	r3, #8
 8000c5c:	d1f9      	bne.n	8000c52 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40007000 	.word	0x40007000
 8000c74:	07405419 	.word	0x07405419
 8000c78:	40023c00 	.word	0x40023c00

08000c7c <__libc_init_array>:
 8000c7c:	b570      	push	{r4, r5, r6, lr}
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <__libc_init_array+0x3c>)
 8000c80:	4c0e      	ldr	r4, [pc, #56]	; (8000cbc <__libc_init_array+0x40>)
 8000c82:	1ae4      	subs	r4, r4, r3
 8000c84:	10a4      	asrs	r4, r4, #2
 8000c86:	2500      	movs	r5, #0
 8000c88:	461e      	mov	r6, r3
 8000c8a:	42a5      	cmp	r5, r4
 8000c8c:	d004      	beq.n	8000c98 <__libc_init_array+0x1c>
 8000c8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c92:	4798      	blx	r3
 8000c94:	3501      	adds	r5, #1
 8000c96:	e7f8      	b.n	8000c8a <__libc_init_array+0xe>
 8000c98:	f000 f822 	bl	8000ce0 <_init>
 8000c9c:	4c08      	ldr	r4, [pc, #32]	; (8000cc0 <__libc_init_array+0x44>)
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <__libc_init_array+0x48>)
 8000ca0:	1ae4      	subs	r4, r4, r3
 8000ca2:	10a4      	asrs	r4, r4, #2
 8000ca4:	2500      	movs	r5, #0
 8000ca6:	461e      	mov	r6, r3
 8000ca8:	42a5      	cmp	r5, r4
 8000caa:	d004      	beq.n	8000cb6 <__libc_init_array+0x3a>
 8000cac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cb0:	4798      	blx	r3
 8000cb2:	3501      	adds	r5, #1
 8000cb4:	e7f8      	b.n	8000ca8 <__libc_init_array+0x2c>
 8000cb6:	bd70      	pop	{r4, r5, r6, pc}
 8000cb8:	08000d78 	.word	0x08000d78
 8000cbc:	08000d78 	.word	0x08000d78
 8000cc0:	08000d7c 	.word	0x08000d7c
 8000cc4:	08000d78 	.word	0x08000d78

08000cc8 <memcpy>:
 8000cc8:	b510      	push	{r4, lr}
 8000cca:	1e43      	subs	r3, r0, #1
 8000ccc:	440a      	add	r2, r1
 8000cce:	4291      	cmp	r1, r2
 8000cd0:	d004      	beq.n	8000cdc <memcpy+0x14>
 8000cd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000cd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000cda:	e7f8      	b.n	8000cce <memcpy+0x6>
 8000cdc:	bd10      	pop	{r4, pc}
	...

08000ce0 <_init>:
 8000ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ce2:	bf00      	nop
 8000ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ce6:	bc08      	pop	{r3}
 8000ce8:	469e      	mov	lr, r3
 8000cea:	4770      	bx	lr

08000cec <_fini>:
 8000cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cee:	bf00      	nop
 8000cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cf2:	bc08      	pop	{r3}
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	4770      	bx	lr
